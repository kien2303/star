import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
traffic = ctrl.Antecedent(np.arange(0, 11,1), 'traffic')
distance = ctrl.Antecedent(np.arange(0, 16,1), 'distance')
weather = ctrl.Antecedent(np.arange(0, 3,1), 'weather')
preptime = ctrl.Antecedent(np.arange(0, 26, 1),'preptime')
fatigue= ctrl.Antecedent(np.arange(0, 11, 1), 'fatigue')
deliverytime = ctrl.Consequent(np.arange(0, 41, 1), 'deliverytime')
incentive = ctrl.Consequent(np.arange(0, 61, 1), 'incentive')
rating =ctrl.Consequent(np.arange(1, 6, 1), 'rating')
traffic['L']=fuzz.trimf(traffic.universe,[0,0,10])
traffic['M']=fuzz.trimf(traffic.universe,[5,15,20])
traffic['H']=fuzz.trimf(traffic.universe,[15,25,30])
distance['S']=fuzz.trimf(distance.universe,[0,0,10])
distance['M']=fuzz.trimf(distance.universe,[5,15,20])
distance['L']=fuzz.trimf(distance.universe,[15,25,40])
weather['C']=fuzz.trimf(weather.universe,[0,0,20])
weather['R']=fuzz.trimf(weather.universe,[15,25,40])
weather['S']=fuzz.trimf(weather.universe,[35,45,50])
preptime['F']=fuzz.trimf(preptime.universe,[0,0,10])
preptime['M']=fuzz.trimf(preptime.universe,[5,15,20])
preptime['S']=fuzz.trimf(preptime.universe,[15,25,30])
fatigue['L']=fuzz.trimf(fatigue.universe,[0,0,20])
fatigue['M']=fuzz.trimf(fatigue.universe,[15,18,30])
fatigue['H']=fuzz.trimf(fatigue.universe,[25,35,40])
deliverytime['S'] = fuzz.trimf(deliverytime.universe, [0, 0, 10])
deliverytime['M'] = fuzz.trimf(deliverytime.universe, [5, 17.5, 25])
deliverytime['L'] = fuzz.trimf(deliverytime.universe, [20, 30, 40])
incentive ['L'] = fuzz.trimf(incentive.universe, [0, 0, 20])
incentive['M'] = fuzz.trimf(incentive.universe, [10, 30, 60])
incentive['H'] = fuzz.trimf(incentive.universe, [40, 60, 60])
rating['P'] = fuzz.trimf(rating.universe, [1, 1, 2.5])
rating['A'] =fuzz.trimf(rating.universe, [2, 3, 4])
rating['E'] =fuzz.trimf(rating.universe, [3.5, 4.5, 6])
rule1=ctrl.Rule(traffic['L']&distance['S'],deliverytime['S'])
rule2=ctrl.Rule(traffic['M']&distance['M'],deliverytime['M'])
rule3=ctrl.Rule(traffic['H']&distance['L'],deliverytime['L'])
rule4=ctrl.Rule(weather['C'],incentive['L'])
rule5=ctrl.Rule(weather['R'],incentive['M'])
rule4=ctrl.Rule(weather['S'],incentive['H'])
rule4=ctrl.Rule(weather['C'],incentive['L'])
rule5 = ctrl.Rule(weather['R'],incentive ['M'])
rule6 = ctrl.Rule(weather['S'],incentive ['H'])
rule7 = ctrl.Rule(preptime['F'] & traffic['L'],deliverytime['S'])
rule8 = ctrl.Rule(preptime['M']& traffic ['M'], deliverytime['M'])
rule9 = ctrl.Rule(preptime['S']& traffic['H'], deliverytime['L'])
rule10 = ctrl.Rule(fatigue[ 'H'],rating['E'])
rule11 = ctrl.Rule(fatigue['M'],rating['A'])
rule12 = ctrl.Rule(fatigue['L'],rating['P'])
rule13 = ctrl.Rule(distance["L"] & weather['S'] & traffic['H'], ( deliverytime["L"],incentive['H']))
rule14 = ctrl.Rule(distance['S'] & weather['C'] & traffic['L'],(deliverytime['S'],incentive['L']))
rule15 = ctrl.Rule(fatigue['H'] & traffic['H'], ( rating['E'], deliverytime['L']))
control_system = ctrl.ControlSystem([rule1,rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13, rule14, rule15])
fuzzysystem = ctrl.ControlSystemSimulation(control_system)
fuzzysystem.input['traffic']=9
fuzzysystem.input[ 'distance'] = 9
fuzzysystem.input['weather'] = 2
fuzzysystem.input['preptime'] =16
fuzzysystem.input['fatigue']=8
fuzzysystem.compute()
print ("Thời gian dự kiến.", fuzzysystem.output['deliverytime'])
print ("Thuong",fuzzysystem.output['incentive'])
print ("Đánh gia:", fuzzysystem.output['rating'])
deliverytime.view(sim=fuzzysystem)
incentive.view(sim=fuzzysystem)
rating.view(sim=fuzzysystem)
