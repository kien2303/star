import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
order_density = ctrl.Antecedent(np.arange(0, 4, 0.5), 'order_density')
delivery_urgency = ctrl.Antecedent(np.arange(0, 4, 0.5), 'delivery_urgency')
driver_load = ctrl.Antecedent(np.arange(0, 4, 0.5), 'driver_load')
traffic_conditions = ctrl.Antecedent(np.arange(0, 4, 0.5), 'traffic_conditions')
profit = ctrl.Antecedent(np.arange(0, 4, 0.5), 'profit')
orders_to_combine = ctrl.Consequent(np.arange(0, 4, 0.5), 'orders_to_combine')
delivery_priority = ctrl.Consequent(np.arange(0, 4, 0.5), 'delivery_priority')
order_density['low'] = fuzz.trimf(order_density.universe, [0, 0, 1])
order_density['medium'] = fuzz.trimf(order_density.universe, [1, 1.5, 2])
order_density['high'] = fuzz.trimf(order_density.universe, [2, 2.5, 4])
delivery_urgency['low'] = fuzz.trimf(delivery_urgency.universe, [0, 0, 1])
delivery_urgency['medium'] = fuzz.trimf(delivery_urgency.universe, [1.0, 1.5, 2])
delivery_urgency['high'] = fuzz.trimf(delivery_urgency.universe, [2, 2.5, 4])
driver_load['low'] = fuzz.trimf(driver_load.universe, [0, 0, 1])
driver_load['medium'] = fuzz.trimf(driver_load.universe, [1,1.5, 2])
driver_load['high'] = fuzz.trimf(driver_load.universe, [2, 2.5, 4])
traffic_conditions['low'] = fuzz.trimf(traffic_conditions.universe, [0, 0, 1])
traffic_conditions['medium'] = fuzz.trimf(traffic_conditions.universe, [1, 1.5, 2])
traffic_conditions['high'] = fuzz.trimf(traffic_conditions.universe, [2, 2.5, 4])
profit['low'] = fuzz.trimf(profit.universe, [0, 0, 1])
profit['medium'] = fuzz.trimf(profit.universe, [1, 1.5, 2])
profit['high'] = fuzz.trimf(profit.universe, [2, 2.5, 4])
orders_to_combine['few'] = fuzz.trimf(orders_to_combine.universe, [0, 0, 1])
orders_to_combine['some'] = fuzz.trimf(orders_to_combine.universe, [1,1.5, 2])
orders_to_combine['many'] = fuzz.trimf(orders_to_combine.universe, [2,2.5, 4])
delivery_priority['low'] = fuzz.trimf(delivery_priority.universe, [0, 0, 1])
delivery_priority['medium'] = fuzz.trimf(delivery_priority.universe, [1, 1.5, 2])
delivery_priority['high'] = fuzz.trimf(delivery_priority.universe, [2, 2.5,4])
rule1 = ctrl.Rule(order_density['high'] & driver_load['low'] & traffic_conditions['low'], orders_to_combine['many'])
rule2 = ctrl.Rule(order_density['medium'] & traffic_conditions['high'] & delivery_urgency['medium'], orders_to_combine['some'])
rule3 = ctrl.Rule(driver_load['high'] & order_density['high'] & profit['medium'], orders_to_combine['some'])
rule4 = ctrl.Rule(order_density['low'] & delivery_urgency['high'] & traffic_conditions['medium'], orders_to_combine['some'])
rule5 = ctrl.Rule(profit['high'] & delivery_urgency['high'] & traffic_conditions['high'], orders_to_combine['some'])
rule6 = ctrl.Rule(delivery_urgency['high'] & profit['high'], delivery_priority['high'])
rule7 = ctrl.Rule(delivery_urgency['medium'] & traffic_conditions['medium'], delivery_priority['medium'])
rule8 = ctrl.Rule(delivery_urgency['low'] & order_density['high'] & profit['low'], delivery_priority['low'])
control_system = ctrl.ControlSystem([rule1,rule2, rule3, rule4, rule5, rule6, rule7, rule8])
fuzzysystem = ctrl.ControlSystemSimulation(control_system)
fuzzysystem.input['order_density'] = 2.5
fuzzysystem.input['delivery_urgency'] =1.5
fuzzysystem.input['driver_load'] = 0.5
fuzzysystem.input['traffic_conditions'] = 1.5
fuzzysystem.input['profit'] = 1.5
fuzzysystem.compute()
print("orders_to_combine:", fuzzysystem.output['orders_to_combine'])
print("Delivery_priority:", fuzzysystem.output['delivery_priority'])
