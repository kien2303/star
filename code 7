
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
demand = ctrl.Antecedent(np.arange(0, 4, 1), 'Demand')
competitor_price = ctrl.Antecedent(np.arange(0, 4, 1), 'CompetitorPrice') 
production_cost = ctrl.Antecedent(np.arange(0, 4, 1), 'ProductionCost') 
seasonality = ctrl.Antecedent(np.arange(0, 4, 1), 'Seasonality') 
stock_level = ctrl.Antecedent(np.arange(0, 4, 1), 'StockLevel') 
final_price = ctrl.Consequent(np.arange(0, 6, 1), 'FinalPrice') 
demand['Low'] = fuzz.trimf(demand.universe, [0, 0, 1])
demand['Medium'] = fuzz.trimf(demand.universe, [1, 1.5, 2])
demand['High'] = fuzz.trimf(demand.universe, [2, 2.5, 3])
competitor_price['Low'] = fuzz.trimf(competitor_price.universe, [0, 0, 1])
competitor_price['Medium'] = fuzz.trimf(competitor_price.universe, [1, 1.5, 2.0])
competitor_price['High'] = fuzz.trimf(competitor_price.universe, [2, 2.5, 3])
production_cost['Low'] = fuzz.trimf(production_cost.universe, [0, 0, 1])
production_cost['Medium'] = fuzz.trimf(production_cost.universe, [1, 1.5, 2.0])
production_cost['High'] = fuzz.trimf(production_cost.universe, [2, 2.5, 3.0])
seasonality['OffPeak'] = fuzz.trimf(seasonality.universe, [0, 0, 1])
seasonality['Normal'] = fuzz.trimf(seasonality.universe, [0, 1.5, 2.0])
seasonality['Peak'] = fuzz.trimf(seasonality.universe, [2, 2.5, 3])
stock_level['Low'] = fuzz.trimf(stock_level.universe, [0, 0, 1])
stock_level['Medium'] = fuzz.trimf(stock_level.universe, [1, 1.5, 2.0])
stock_level['High'] = fuzz.trimf(stock_level.universe, [2, 2.5, 3.0])
final_price['VeryLow'] = fuzz.trimf(final_price.universe, [0, 0, 1])
final_price['Low'] = fuzz.trimf(final_price.universe, [ 1, 1.2, 2])
final_price['Medium'] = fuzz.trimf(final_price.universe, [2, 2.5, 3])
final_price['High'] = fuzz.trimf(final_price.universe, [3, 3.5, 4])
final_price['VeryHigh'] = fuzz.trimf(final_price.universe, [4, 4.5,5.0])
rule1=ctrl.Rule(demand['High'] & competitor_price['High'] & stock_level['Low'], final_price['VeryHigh'])
rule2=ctrl.Rule(demand['High'] & seasonality['Peak'] & stock_level['Low'], final_price['VeryHigh'])
rule3=ctrl.Rule(demand['Medium'] & production_cost['High'] & stock_level['Low'], final_price['VeryHigh'])
rule4=ctrl.Rule(demand['High'] & competitor_price['Medium'] & stock_level['Medium'], final_price['High'])
rule5=ctrl.Rule(demand['Medium'] & competitor_price['High'] & stock_level['Low'], final_price['High'])
rule6=ctrl.Rule(demand['Medium'] & competitor_price['High'] & stock_level['Low'], final_price['High'])
rule7=ctrl.Rule(demand['High'] & seasonality['Peak'] & stock_level['Medium'], final_price['High'])
rule8=ctrl.Rule(demand['Medium'] & competitor_price['Medium'] & stock_level['Medium'], final_price['Medium'])
rule9=ctrl.Rule(demand['Low'] & competitor_price['High'] & stock_level['Medium'], final_price['Medium'])
rule10=ctrl.Rule(demand['Medium'] & production_cost['Medium'] & stock_level['Medium'], final_price['Medium'])
rule11=ctrl.Rule(demand['Low'] & competitor_price['Low'] & stock_level['High'], final_price['Low'])
rule12=ctrl.Rule(demand['Medium'] & production_cost['Low'] & stock_level['High'], final_price['Low'])
rule13=ctrl.Rule(demand['Low'] & seasonality['OffPeak'] & stock_level['High'], final_price['Low'])
rule14=ctrl.Rule(demand['Low'] & competitor_price['Low'] & stock_level['High'], final_price['VeryLow'])
rule15=ctrl.Rule(demand['Low'] & seasonality['OffPeak'] & stock_level['High'], final_price['VeryLow'])
rule16=ctrl.Rule(demand['Medium'] & competitor_price['Low'] & stock_level['High'], final_price['VeryLow'])
rule17=ctrl.Rule(demand['Medium'] & competitor_price['Low'] & stock_level['High'], final_price['VeryLow'])
control_system = ctrl.ControlSystem([rule1,rule2, rule3, rule4, rule5, rule6, rule7, rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15,rule16,rule17])
fuzzysystem = ctrl.ControlSystemSimulation(control_system)
fuzzysystem.input['Demand'] = 2 
fuzzysystem.input['CompetitorPrice'] = 3
fuzzysystem.input['ProductionCost'] = 3  
fuzzysystem.input['Seasonality'] = 1
fuzzysystem.input['StockLevel'] = 2  
fuzzysystem.compute()
print(fuzzysystem.output['FinalPrice'])
final_price.view(sim=fuzzysystem)
